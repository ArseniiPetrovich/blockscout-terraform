- name: Local or remote backend selector (remote)
  template:
    src:  roles/infrastructure/templates/remote-backend-selector.tf.j2
    dest: roles/infrastructure/files/remote-backend-selector.tf
  when:
    - backend|bool == true

- name: Local or remote backend selector (local)
  file:
    state: absent
    dest: roles/infrastructure/files/remote-backend-selector.tf
  when:
    - backend | default ('false') | bool != true

- name: Generating variables file
  template:
    src: roles/infrastructure/templates/terraform.tfvars.j2
    dest: roles/infrastructure/files/terraform.tfvars

- name: Generating backend file
  template:
    src: roles/infrastructure/templates/backend.tfvars.j2
    dest: roles/infrastructure/files/backend.tfvars
  when: backend|bool == true

- name: Generate Terraform files
  template:
    src: "{{ item.key }}"
    dest: "{{ item.value }}"
  with_dict: {roles/infrastructure/templates/hosts.tf.j2: roles/infrastructure/files/hosts.tf,roles/infrastructure/templates/routing.tf.j2: roles/infrastructure/files/routing.tf,roles/infrastructure/templates/provider.tf.j2: roles/infrastructure/files/provider.tf}

- name: Check if .terraform folder exists
  stat:
    path: "roles/infrastructure/files/.terraform/"
  register: stat_result

- name: Remove .terraform folder
  file:
    path: roles/infrastructure/files/.terraform/
    state: absent
  when: stat_result.stat.exists == True

#Workaround since terraform module return unexpected error.
- name: Initialize Terraform
  shell: "echo yes | {{ terraform_location }} init{{ ' -backend-config=backend.tfvars' if backend|bool == true else '' }}"
  args:
    chdir: "roles/infrastructure/files"

- name: Attach existing DB instances 
  shell: "echo yes | {{ terraform_location }} import aws_db_instance.default[{{ index }}] {{ prefix }}-{{ item.value }}"
  args:
    chdir: "roles/infrastructure/files"
  loop: "{{ chain_db_id|dict2items }}"
  loop_control:
    index_var: index
