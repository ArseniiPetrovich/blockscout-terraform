version: 2
jobs:
  docker_build:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build image
          command: |
            echo SECRET_KEY_BASE=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c${1:-64};) >> .env
            docker build -t ${ECR_ENDPOINT}/${CIRCLE_BRANCH}:${CIRCLE_SHA1} .
      - run:
          name: Save image
          command: |
            mkdir -p /tmp/docker/images/
            docker save -o /tmp/docker/images/${CIRCLE_BRANCH}.tar ${ECR_ENDPOINT}/${CIRCLE_BRANCH}:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp/docker
          paths: images/*
  docker_push:
    docker:
      - image: docker
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build deps
          command: |
            apk add --no-cache py-pip
            pip install awscli
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load docker image
          command: docker load -i /tmp/workspace/images/${CIRCLE_BRANCH}.tar
      - run:
          name: Login to ECR
          command: |
            login="$(aws ecr get-login --no-include-email)"
            ${login}
      - run:
          name: Push docker image to ECR
          command: docker push "${ECR_ENDPOINT}/${CIRCLE_BRANCH}:${CIRCLE_SHA1}"
  docker_deploy:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install deps
          command: |
            apk add --no-cache py-pip curl
            apk upgrade
            pip install awscli
      - run: 
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl 
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: Fetch Kuber config via aws cli
          command: aws eks update-kubeconfig --name ${KUBERNETES_CLUSTER}
      - run:
          name: Deploy image to K8S
          command: |
            sed -i "s/${ECR_ENDPOINT}\/bs:latest/${ECR_ENDPOINT}\/${CIRCLE_BRANCH}:${CIRCLE_SHA1}/g" kubernetes
            sed -i "s/env-default/env-${CIRCLE_BRANCH}/g" kubernetes
            kubectl delete configmap env-${CIRCLE_BRANCH} || true
            kubectl create configmap env-${CIRCLE_BRANCH} --from-env-file=.env
            kubectl apply -f kubernetes

  packer_validate:
    docker:
      - image: hashicorp/packer:latest
    working_directory: ~/packer
    steps:
      - checkout
      - run:
          name: Validate base
          command: packer validate ./base/base.json
  packer_build-base:
    docker:
      - image: hashicorp/packer:latest
    working_directory: ~/packer
    steps:
      - checkout
      - attach_workspace:
          at: ~/packer
      - run:
          name: Build base
          command: ./scripts/build.sh base base.json
          no_output_timeout: 10m
      - store_artifacts:
          path: manifest-base.json

packer_workflow_filters: &packer_workflow_filters
  filters:
    branches:
      only:
        - Packer-AMIBuilder

docker_workflow_filters: &docker_workflow_filters
          filters:
            branches:
              only:
                - /docker-.*/
                
workflows:
  version: 2
  packer_build-and-deploy:
    jobs:
      - packer_validate: *packer_workflow_filters
      - packer_approve: 
          <<: *packer_workflow_filters
          type: approval
          requires:
            - packer_validate
      - packer_build-base: 
          <<: *packer_workflow_filters
          requires:
            - packer_approve
            - packer_validate
  docker_build-and-deploy:
    jobs:
      - docker_build: *docker_workflow_filters
      - docker_push_approve:
          <<: *docker_workflow_filters
          type: approval
          requires:
            - docker_build
      - docker_push: 
          <<: *docker_workflow_filters
          requires:
            - docker_push_approve 
      - docker_deploy_approve:
          <<: *docker_workflow_filters
          type: approval
          requires:
            - docker_push
      - docker_deploy: 
          <<: *docker_workflow_filters
          requires:
            - docker_deploy_approve 
